from typing import Any, Optional, Tuple, Union

from typing_extensions import Self

# Exception classes
class RequestException(Exception): ...

# Direct children of RequestException
class HTTPError(RequestException): ...
class ConnectionError(RequestException): ...
class Timeout(RequestException): ...
class URLRequired(RequestException): ...
class TooManyRedirects(RequestException): ...
class MissingSchema(RequestException): ...
class InvalidSchema(RequestException): ...
class InvalidURL(RequestException): ...
class InvalidHeader(RequestException): ...
class ChunkedEncodingError(RequestException): ...
class ContentDecodingError(RequestException): ...
class StreamConsumedError(RequestException): ...
class RetryError(RequestException): ...
class UnrewindableBodyError(RequestException): ...
class InvalidJSONError(RequestException): ...

# Children of ConnectionError
class ProxyError(ConnectionError): ...
class SSLError(ConnectionError): ...

# Children of Timeout
class ConnectTimeout(Timeout): ...
class ReadTimeout(Timeout): ...

# Children of InvalidURL
class InvalidProxyURL(InvalidURL): ...

# Children of InvalidJSONError
class JSONDecodeError(InvalidJSONError): ...

# Warnings
class RequestsWarning(Warning): ...
class FileModeWarning(RequestsWarning): ...
class RequestsDependencyWarning(RequestsWarning): ...

class Response:
    status: int
    url: str
    headers: dict[str, str]

    def json(self) -> str: ...
    def text(self) -> str: ...
    def content(self) -> bytes: ...

class Session:
    def __new__(cls) -> Self: ...
    def __init__(self) -> None: ...
    def make_request(
        self,
        method: str,
        url: str,
        *,
        params: Optional[dict[str, str]] = None,
        data: Optional[Union[dict[str, str], str, bytes]] = None,
        json: Optional[Any] = None,
        headers: Optional[dict[str, str]] = None,
        cookies: Optional[dict[str, str]] = None,
        files: Optional[dict[str, str]] = None,
        auth: Optional[Tuple[str, str]] = None,
        timeout: Optional[Union[float, Tuple[float, float]]] = None,
        allow_redirects: Optional[bool] = None,
        proxies: Optional[dict[str, str]] = None,
        stream: Optional[bool] = None,
        verify: Optional[bool] = None,
        cert: Optional[Union[str, Tuple[str, str]]] = None,
    ) -> Response: ...
    def close(self) -> None: ...
    def get_cookies(self) -> dict[str, str]: ...
    def set_cookies(self, cookies: dict[str, str]) -> None: ...
